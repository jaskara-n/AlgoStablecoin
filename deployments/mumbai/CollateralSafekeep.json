{
  "address": "0x864eE6B33FD3CE85E778C68FBB51093B460841A2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_CIP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseRiskRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_riskPremiumRate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_indai",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "collateralSafekeep__userInDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "upkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balanceInINR",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "indaiIssued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultHealth",
          "type": "uint256"
        }
      ],
      "name": "thisIsARiskyVault",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CIP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRiskRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnIndaiAndRelieveCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseRiskRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCIP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentVaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRiskPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCollateralPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalVaultDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceInINR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "indaiIssued",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultHealth",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralSafekeep.vault[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getUserCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantModeratorRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        }
      ],
      "name": "liquidateVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintIndai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "riskPremiumRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIndexes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultDetailsForTheUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "userAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceInINR",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "indaiIssued",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultHealth",
              "type": "uint256"
            }
          ],
          "internalType": "struct CollateralSafekeep.vault",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x539f99e6980b03feda04f743cfaa84abc7bf7191e369df7edd365e39dbd5f10c",
  "receipt": {
    "to": null,
    "from": "0x9EC84A0F43DE1D3cc526A542de925FBf66c7580F",
    "contractAddress": "0x864eE6B33FD3CE85E778C68FBB51093B460841A2",
    "transactionIndex": 5,
    "gasUsed": "3439466",
    "logsBloom": "0x
    "blockHash": "0x8a6ff357a1d41b8791e1c9c7ffec686f2f70ed241a9072ac58db16c8012514d9",
    "transactionHash": "0x539f99e6980b03feda04f743cfaa84abc7bf7191e369df7edd365e39dbd5f10c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 43802528,
        "transactionHash": "0x539f99e6980b03feda04f743cfaa84abc7bf7191e369df7edd365e39dbd5f10c",
        "address": "0x864eE6B33FD3CE85E778C68FBB51093B460841A2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000009ec84a0f43de1d3cc526a542de925fbf66c7580f",
          "0x0000000000000000000000009ec84a0f43de1d3cc526a542de925fbf66c7580f"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x8a6ff357a1d41b8791e1c9c7ffec686f2f70ed241a9072ac58db16c8012514d9"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43802528,
        "transactionHash": "0x539f99e6980b03feda04f743cfaa84abc7bf7191e369df7edd365e39dbd5f10c",
        "address": "0x864eE6B33FD3CE85E778C68FBB51093B460841A2",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f",
          "0x0000000000000000000000009ec84a0f43de1d3cc526a542de925fbf66c7580f",
          "0x0000000000000000000000009ec84a0f43de1d3cc526a542de925fbf66c7580f"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x8a6ff357a1d41b8791e1c9c7ffec686f2f70ed241a9072ac58db16c8012514d9"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 43802528,
        "transactionHash": "0x539f99e6980b03feda04f743cfaa84abc7bf7191e369df7edd365e39dbd5f10c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009ec84a0f43de1d3cc526a542de925fbf66c7580f",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001c5e967b5a4a9e000000000000000000000000000000000000000000000000024ec6b859546c52000000000000000000000000000000000000000000000488af49e035428dda7f00000000000000000000000000000000000000000000000002326821ddfa21b4000000000000000000000000000000000000000000000488af663ecbbde8251d",
        "logIndex": 35,
        "blockHash": "0x8a6ff357a1d41b8791e1c9c7ffec686f2f70ed241a9072ac58db16c8012514d9"
      }
    ],
    "blockNumber": 43802528,
    "cumulativeGasUsed": "4428449",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "150",
    "200",
    "7",
    "0x254de59550E710931b4A92a899b8A37977C72695",
    "0x37f2e274665Cc3fB00197ca8EDcE028A1515B287"
  ],
  "numDeployments": 6,
  "solcInputHash": "929c41ca133baaafc6e229de26bf53bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_CIP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseRiskRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskPremiumRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_indai\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"collateralSafekeep__userInDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"upkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceInINR\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"indaiIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultHealth\",\"type\":\"uint256\"}],\"name\":\"thisIsARiskyVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRiskRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnIndaiAndRelieveCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseRiskRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentVaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiskPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCollateralPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalVaultDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInINR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indaiIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultHealth\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralSafekeep.vault[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantModeratorRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"liquidateVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintIndai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"riskPremiumRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIndexes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultDetailsForTheUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceInINR\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"indaiIssued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultHealth\",\"type\":\"uint256\"}],\"internalType\":\"struct CollateralSafekeep.vault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"burnIndaiAndRelieveCollateral(uint256)\":{\"details\":\"only allow user to withdraw if no debt in vault    \"},\"getBaseRiskRate()\":{\"details\":\"public getter function.\",\"returns\":{\"_0\":\"uint256\"}},\"getCIP()\":{\"details\":\"this function is public in case we need to manually liquidate a vault\",\"returns\":{\"_0\":\"\"}},\"getCurrentVaultId()\":{\"returns\":{\"_0\":\"Returns the user's balance in eth\"}},\"getRiskPremiumRate()\":{\"details\":\"public getter function.\",\"returns\":{\"_0\":\"uint256\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTotalVaultDetails()\":{\"returns\":{\"_0\":\"total collateral balance of the whole contract in eth\"}},\"getUserCollateralBalance(address)\":{\"returns\":{\"_0\":\"uint256 type max mintable indai\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidateVault(address)\":{\"details\":\"emits event of the risky vaults this function is periodically called by chainlink keepersthis function updates the user's collateral balance in inr in the vault periodically\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateVault()\":{\"custom:misc\":\"User can use this function to mint dai after depositing the collateral in vault\",\"details\":\"This function is the algorithmic minting of indai, one indai is minted for every rupee of collateralUpdates the token amount in the user's vault\"},\"vaultDetailsForTheUser()\":{\"details\":\"public getter function.\",\"returns\":{\"_0\":\"uint256\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burnIndaiAndRelieveCollateral(uint256)\":{\"notice\":\"User can withdraw if any excess collateral than 150 percent of indai issued\"},\"getBaseRiskRate()\":{\"notice\":\"collateral to indai percentage defined by the DAO.\"},\"getCIP()\":{\"notice\":\"liquidates vaults that get too risky.\"},\"getRiskPremiumRate()\":{\"notice\":\"base risk rate on all collateral types defined by the DAO.\"},\"getUserCollateralBalance(address)\":{\"notice\":\"calculates max amount of indai that can be minted by user at given vault state\"},\"liquidateVault(address)\":{\"notice\":\"This function liquidates vaults that get too risky\"},\"mintIndai(uint256)\":{\"notice\":\"creates a new vault for a user\"},\"updateVault()\":{\"notice\":\"This allows user to mint indai based on their collateral in the vaultUser cannot mint if vault health is lower than 150 percentOne indai is issued for every ruppee of collateral(in eth, converted to inr)\"},\"vaultDetailsForTheUser()\":{\"notice\":\"risk premium rate on specific collateral type defined by the DAO.\"},\"withdrawFromVault(uint256)\":{\"notice\":\"This adds nore collateral in eth to the user's existing vault\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CollateralSafekeep.sol\":\"CollateralSafekeep\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CollateralSafekeep.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\n/**************Interfaces***************/\\r\\ninterface i_Indai {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function burn(uint256 amount) external;\\r\\n\\r\\n    function burnFrom(address account, uint256 amount) external;\\r\\n\\r\\n    function mint(address to, uint256 amount) external;\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IPriceFeed {\\r\\n    function EthToUsd() external view returns (uint256, uint256);\\r\\n\\r\\n    function InrToUsd() external view returns (uint256, uint256);\\r\\n}\\r\\n\\r\\n///@title Indai algorithmic stablecoin\\r\\n///@author Jaskaran Singh\\r\\n///@notice\\r\\n///@dev\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\n\\r\\n// import \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\ncontract CollateralSafekeep is AccessControl {\\r\\n    /*************VARIABLES****************/\\r\\n\\r\\n    i_Indai internal token; //For ERC20 functions of the system\\r\\n    IPriceFeed internal priceContract;\\r\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\r\\n    bytes32 public constant MODERATOR_ROLE = keccak256(\\\"MODERATOR_ROLE\\\");\\r\\n    uint256 private lastTimeStamp;\\r\\n    // uint256 private immutable timeInterval;\\r\\n    uint256 public immutable CIP; //Indai to collateral ratio\\r\\n    uint256 public immutable baseRiskRate; //Base rate debt on a vault\\r\\n    uint256 public immutable riskPremiumRate; //Currently only for ethereum, the rate associated with debt in a vault, with increasing time\\r\\n    uint256 internal vault_ID;\\r\\n    int256 internal currentCollateralBalance; // total collateral balance of the whole contract in inr\\r\\n\\r\\n    /************STRUCTS******************/\\r\\n    struct vault {\\r\\n        uint256 vaultId;\\r\\n        address userAddress;\\r\\n        uint256 balance; // In eth\\r\\n        uint256 balanceInINR; // In inr\\r\\n        uint256 indaiIssued;\\r\\n        uint256 vaultHealth; // vault health should be greater than 150 to avoid liquidation\\r\\n    }\\r\\n\\r\\n    /**************ARRAYS***************/\\r\\n    vault[] internal userVaults;\\r\\n\\r\\n    /************EVENTS******************/\\r\\n    event thisIsARiskyVault(\\r\\n        uint256 vaultId,\\r\\n        address userAddress,\\r\\n        uint256 balance,\\r\\n        uint256 balanceInINR,\\r\\n        uint256 indaiIssued,\\r\\n        uint256 vaultHealth\\r\\n    );\\r\\n\\r\\n    mapping(address => uint256) public userIndexes;\\r\\n\\r\\n    /***************MODIFIERS***********/\\r\\n\\r\\n    //The user should have a vault\\r\\n    modifier yesVault() {\\r\\n        require(\\r\\n            userIndexes[msg.sender] == 1,\\r\\n            \\\"You dont have a Vault, create a vault first!\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //The user should have no vault\\r\\n    modifier noVault() {\\r\\n        require(userIndexes[msg.sender] == 0, \\\"You already have a vault\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"Must have ADMIN_ROLE\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyModerator() {\\r\\n        require(\\r\\n            hasRole(MODERATOR_ROLE, msg.sender),\\r\\n            \\\"Must have MODERATOR_ROLE\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /***************ERRORS***********/\\r\\n    error upkeepNotNeeded();\\r\\n    error collateralSafekeep__userInDebt();\\r\\n\\r\\n    /***************EVENTS***********/\\r\\n\\r\\n    constructor(\\r\\n        // uint256 _timeInterval,\\r\\n        uint256 _CIP,\\r\\n        uint256 _baseRiskRate,\\r\\n        uint256 _riskPremiumRate,\\r\\n        address _indai,\\r\\n        address _priceContract\\r\\n    ) {\\r\\n        _grantRole(ADMIN_ROLE, msg.sender); // Grant ADMIN_ROLE to the contract deployer\\r\\n        _grantRole(MODERATOR_ROLE, msg.sender);\\r\\n        token = i_Indai(_indai);\\r\\n        priceContract = IPriceFeed(_priceContract);\\r\\n        lastTimeStamp = block.timestamp;\\r\\n        /* timeInterval= timeInterval;*/\\r\\n        CIP = _CIP;\\r\\n        baseRiskRate = _baseRiskRate;\\r\\n        riskPremiumRate = _riskPremiumRate;\\r\\n        vault_ID = 1;\\r\\n        vault memory initialVault = vault({\\r\\n            indaiIssued: 0,\\r\\n            userAddress: address(0),\\r\\n            vaultId: 0,\\r\\n            balance: 0,\\r\\n            balanceInINR: 0,\\r\\n            vaultHealth: 0\\r\\n        });\\r\\n        userVaults.push(initialVault);\\r\\n    }\\r\\n\\r\\n    /*************PUBLIC FUNCTIONS************/\\r\\n\\r\\n    function grantModeratorRole(address account) public onlyModerator {\\r\\n        grantRole(MODERATOR_ROLE, account);\\r\\n    }\\r\\n\\r\\n    //Create a new vault for a user\\r\\n    function createVault() public payable noVault {\\r\\n        require(msg.value > 0, \\\"ETH amount must be greater than 0\\\");\\r\\n        vault memory newVault;\\r\\n        newVault.balance = msg.value;\\r\\n        newVault.userAddress = msg.sender;\\r\\n        newVault.vaultId = vault_ID;\\r\\n        newVault.indaiIssued = 0; //Initially it will be 0 for a new vault\\r\\n        newVault.vaultHealth = 100; //Full health for new vault\\r\\n        newVault.balanceInINR = userBalanceInInr(msg.sender);\\r\\n        userVaults.push(newVault);\\r\\n        userIndexes[msg.sender] = vault_ID;\\r\\n        vault_ID = vault_ID + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice creates a new vault for a user\\r\\n    */\\r\\n\\r\\n    function mintIndai(uint256 amount) public yesVault {\\r\\n        require(amount > 0, \\\"enter valid amount\\\");\\r\\n        require(\\r\\n            userVaults[userIndexes[msg.sender]].vaultHealth > CIP,\\r\\n            \\\"you are in debt!\\\"\\r\\n        );\\r\\n        uint256 max = calculateMaxMintableDai(msg.sender);\\r\\n        require(amount < max, \\\"enter amount less than CIP cross\\\");\\r\\n        token.mint(msg.sender, amount);\\r\\n        userVaults[userIndexes[msg.sender]].indaiIssued = amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice This allows user to mint indai based on their collateral in the vault\\r\\n        @notice User cannot mint if vault health is lower than 150 percent\\r\\n        @notice One indai is issued for every ruppee of collateral(in eth, converted to inr)\\r\\n        @dev This function is the algorithmic minting of indai, one indai is minted for every rupee of collateral\\r\\n        @dev Updates the token amount in the user's vault\\r\\n        @custom:misc User can use this function to mint dai after depositing the collateral in vault\\r\\n    */\\r\\n\\r\\n    function updateVault() public payable yesVault {\\r\\n        require(msg.value > 0, \\\"eth amount must be greater than 0\\\");\\r\\n        userVaults[userIndexes[msg.sender]].balance += msg.value;\\r\\n        userVaults[userIndexes[msg.sender]].balanceInINR = userBalanceInInr(\\r\\n            msg.sender\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice This adds nore collateral in eth to the user's existing vault\\r\\n    */\\r\\n\\r\\n    function withdrawFromVault(uint256 amount) public payable yesVault {\\r\\n        require(amount > 0, \\\"Withdraw amount should be greater than 0\\\");\\r\\n        require(\\r\\n            userVaults[userIndexes[msg.sender]].balance >= amount,\\r\\n            \\\"insufficient balance in vault\\\"\\r\\n        );\\r\\n        require(\\r\\n            liquidationCondition(msg.sender) == true,\\r\\n            \\\"Clear your debt in the vault!\\\"\\r\\n        );\\r\\n        uint256 max = calculateMaxWithdrawableCollateral(msg.sender);\\r\\n        require(amount < max, \\\"you will go into debt!\\\");\\r\\n        payable(msg.sender).transfer(amount);\\r\\n        userVaults[userIndexes[msg.sender]].vaultHealth = calculateVaultHealth(\\r\\n            msg.sender\\r\\n        );\\r\\n        userVaults[userIndexes[msg.sender]].balance -= amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice User can withdraw if any excess collateral than 150 percent of indai issued\\r\\n        @dev only allow user to withdraw if no debt in vault    \\r\\n    */\\r\\n\\r\\n    function burnIndaiAndRelieveCollateral(uint256 amount) public yesVault {\\r\\n        require(userVaults[userIndexes[msg.sender]].indaiIssued > 0);\\r\\n        require(userVaults[userIndexes[msg.sender]].indaiIssued >= amount);\\r\\n        token.burnFrom(msg.sender, amount);\\r\\n        userVaults[userIndexes[msg.sender]].indaiIssued -= amount;\\r\\n        userVaults[userIndexes[msg.sender]].balanceInINR += amount;\\r\\n        calculateVaultHealth(msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice User can burn their indai tokens to repay their debt \\r\\n        @dev only allow user to withdraw if no debt in vault    \\r\\n    */\\r\\n\\r\\n    // function checkUpkeep(\\r\\n    //     bytes memory /*performData*/\\r\\n    // ) public view override returns (bool upkeepNeeded, bytes memory) {\\r\\n    //     bool isTimePassed = (block.timestamp - lastTimeStamp) > timeInterval;\\r\\n    //     bool hasBalance = address(this).balance > 0;\\r\\n    //     upkeepNeeded = (isTimePassed && hasBalance);\\r\\n    // }\\r\\n\\r\\n    // /**\\r\\n    //     @notice Chainlink function that checks if time interval has passed so that contract can perform the perform upkeep function\\r\\n    //     @dev conditions for upkeepNeeded to be true:\\r\\n    //     1. time interval has to be passed\\r\\n    //     2. there should be atleast someone deposited some eth into the vault\\r\\n    //     3. our keepers subscription should be funded with link\\r\\n    // */\\r\\n\\r\\n    // function performUpkeep(bytes memory /*performData*/) external override {\\r\\n    //     (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n    //     if (!upkeepNeeded) {\\r\\n    //         revert upkeepNotNeeded();\\r\\n    //     } else {\\r\\n    //         (\\r\\n    //             ,\\r\\n    //             /* uint80 roundID */\\r\\n    //             int256 answer1 /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n    //             ,\\r\\n    //             ,\\r\\n\\r\\n    //         ) = priceFeed_ETHtoUSD.latestRoundData();\\r\\n\\r\\n    //         (\\r\\n    //             ,\\r\\n    //             /* uint80 roundID */\\r\\n    //             int256 answer2 /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/,\\r\\n    //             ,\\r\\n    //             ,\\r\\n\\r\\n    //         ) = priceFeed_INRtoUSD.latestRoundData();\\r\\n\\r\\n    //         currentCollateralBalance =\\r\\n    //             (int256(address(this).balance) * answer1) /\\r\\n    //             (answer2);\\r\\n\\r\\n    //         //function to scan each user vault for ratio (returned by enternal oracle)\\r\\n    //         scanVaults();\\r\\n    //     }\\r\\n    // }\\r\\n\\r\\n    // /**\\r\\n    //     @notice This function runs periodically and scans through every vault to check vault health.\\r\\n    //     @dev Chainlink keeper function that looks for upkeepNeeded to return true and then perform the performUpkeep\\r\\n    //     function to get price feed for vaults at regular intervals of time, and liquidated vaults.\\r\\n    //     @dev Calls scanVaults() directly and other functions indirectly.\\r\\n    // */\\r\\n\\r\\n    function calculateVaultHealth(address _user) internal returns (uint256) {\\r\\n        uint256 collateral = userVaults[userIndexes[_user]].balance;\\r\\n        uint256 indaiIssued = userVaults[userIndexes[_user]].indaiIssued;\\r\\n        uint256 vaultHealth = (collateral / indaiIssued) * 100;\\r\\n        userVaults[userIndexes[_user]].vaultHealth = vaultHealth;\\r\\n        return vaultHealth;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice calculates vault health of a users vault at a particular state\\r\\n        @dev emits an event if vault health is less than 150\\r\\n        @dev Vault health in the array of user data is updated in this function \\r\\n        @dev this function is called by scanvaults time to time\\r\\n        @dev this function can be used both as a getter(to check vault health of user) and setter(update vault health of user in array)\\r\\n        @dev this function is only for the contract, public getter function is the another one.\\r\\n    */\\r\\n\\r\\n    function liquidationCondition(address user) internal returns (bool) {\\r\\n        uint256 current = calculateVaultHealth(user);\\r\\n        if (current > CIP) {\\r\\n            return false;\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function scanVaults() internal {\\r\\n        uint256 userVaultArrayLength = userVaults.length;\\r\\n        for (uint256 i = 0; i <= userVaultArrayLength; i++) {\\r\\n            userVaults[i].balanceInINR = userBalanceInInr(\\r\\n                userVaults[i].userAddress\\r\\n            );\\r\\n            userVaults[i].vaultHealth = calculateVaultHealth(\\r\\n                userVaults[i].userAddress\\r\\n            );\\r\\n            bool yesOrNo = liquidationCondition(userVaults[i].userAddress);\\r\\n            if (yesOrNo = true) {\\r\\n                liquidateVault(userVaults[i].userAddress);\\r\\n                emit thisIsARiskyVault(\\r\\n                    i,\\r\\n                    userVaults[i].userAddress,\\r\\n                    userVaults[i].balance,\\r\\n                    userVaults[i].balanceInINR,\\r\\n                    userVaults[i].indaiIssued,\\r\\n                    userVaults[i].vaultHealth\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice This function liquidates vaults that get too risky\\r\\n        @dev emits event of the risky vaults \\r\\n        @dev this function is periodically called by chainlink keepers\\r\\n        @dev this function updates the user's collateral balance in inr in the vault periodically\\r\\n    */\\r\\n\\r\\n    /*************MOD ONLY FUNCTIONS*************/\\r\\n\\r\\n    function liquidateVault(address _vaultAddress) public onlyModerator {}\\r\\n\\r\\n    /** @notice liquidates vaults that get too risky.\\r\\n        @dev this function is public in case we need to manually liquidate a vault\\r\\n        @return \\r\\n    */\\r\\n\\r\\n    /*************GETTER FUNCTIONS*************/\\r\\n\\r\\n    function getCIP() public view returns (uint256) {\\r\\n        return CIP;\\r\\n    }\\r\\n\\r\\n    /** @notice collateral to indai percentage defined by the DAO.\\r\\n        @dev public getter function.\\r\\n        @return uint256\\r\\n    */\\r\\n\\r\\n    function getBaseRiskRate() public view returns (uint256) {\\r\\n        return baseRiskRate;\\r\\n    }\\r\\n\\r\\n    /** @notice base risk rate on all collateral types defined by the DAO.\\r\\n        @dev public getter function.\\r\\n        @return uint256\\r\\n    */\\r\\n\\r\\n    function getRiskPremiumRate() public view returns (uint256) {\\r\\n        return riskPremiumRate;\\r\\n    }\\r\\n\\r\\n    /** @notice risk premium rate on specific collateral type defined by the DAO.\\r\\n        @dev public getter function.\\r\\n        @return uint256\\r\\n    */\\r\\n\\r\\n    function vaultDetailsForTheUser()\\r\\n        public\\r\\n        view\\r\\n        yesVault\\r\\n        returns (vault memory)\\r\\n    {\\r\\n        vault memory tempVault;\\r\\n        tempVault.vaultId = userVaults[userIndexes[msg.sender]].vaultId;\\r\\n        tempVault.userAddress = msg.sender;\\r\\n        tempVault.balance = userVaults[userIndexes[msg.sender]].balance;\\r\\n        tempVault.indaiIssued = userVaults[userIndexes[msg.sender]].indaiIssued;\\r\\n        return tempVault;\\r\\n    }\\r\\n\\r\\n    /*************MOD OR CONTRACT ONLY GETTER FUNCTIONS*************/\\r\\n\\r\\n    function userBalanceInInr(\\r\\n        address _address\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 bal = userVaults[userIndexes[_address]].balance;\\r\\n\\r\\n        (\\r\\n            ,\\r\\n            /* uint256 time stamp */\\r\\n            uint256 a /*uint256 answer*/\\r\\n        ) = priceContract.EthToUsd();\\r\\n\\r\\n        (\\r\\n            ,\\r\\n            /* uint256 time stamp */\\r\\n            uint256 b /*uint256 answer*/\\r\\n        ) = priceContract.InrToUsd();\\r\\n        uint256 c = (bal * uint256(a)) / uint256(b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice returns current vault balance of a user in inr\\r\\n        @dev returns only the current balance that is stored in eth, by converting it to inr\\r\\n        @return uint256 type price in inr\\r\\n    */\\r\\n\\r\\n    function calculateMaxMintableDai(\\r\\n        address user\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 _userBalanceInInr = userBalanceInInr(user);\\r\\n        uint256 indaiIssued = userVaults[userIndexes[user]].indaiIssued;\\r\\n        uint256 collateralToDebtRatio = (_userBalanceInInr) / indaiIssued;\\r\\n        uint256 maxMintableDai = 0;\\r\\n\\r\\n        if ((collateralToDebtRatio) * 100 < CIP) {\\r\\n            maxMintableDai = (CIP - collateralToDebtRatio) * _userBalanceInInr;\\r\\n        } else {\\r\\n            revert collateralSafekeep__userInDebt();\\r\\n        }\\r\\n\\r\\n        return maxMintableDai;\\r\\n    }\\r\\n\\r\\n    function calculateMaxWithdrawableCollateral(\\r\\n        address user\\r\\n    ) internal view yesVault returns (uint256) {\\r\\n        uint256 collateral = userVaults[userIndexes[user]].balanceInINR;\\r\\n        require(\\r\\n            userVaults[userIndexes[user]].indaiIssued <\\r\\n                userVaults[userIndexes[user]].balanceInINR,\\r\\n            \\\"you are in debt!\\\"\\r\\n        );\\r\\n        require(\\r\\n            userVaults[userIndexes[user]].vaultHealth > CIP,\\r\\n            \\\"you are in debt\\\"\\r\\n        );\\r\\n        uint256 max = (collateral * (100 - CIP)) / 100;\\r\\n        return max;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @notice calculates max amount of indai that can be minted by user at given vault state\\r\\n        @return uint256 type max mintable indai\\r\\n    */\\r\\n\\r\\n    function getUserCollateralBalance(\\r\\n        address _address\\r\\n    ) public view onlyModerator returns (uint256) {\\r\\n        return userVaults[userIndexes[_address]].balance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @return Returns the user's balance in eth\\r\\n    */\\r\\n\\r\\n    function getCurrentVaultId() public view onlyModerator returns (uint256) {\\r\\n        //can be used to get total no of vaults\\r\\n        //vault id starts from 1\\r\\n        return vault_ID;\\r\\n    }\\r\\n\\r\\n    function getTotalCollateralPrice()\\r\\n        public\\r\\n        view\\r\\n        onlyModerator\\r\\n        returns (int256)\\r\\n    {\\r\\n        return currentCollateralBalance;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @return  total collateral balance of the whole contract in eth\\r\\n    */\\r\\n\\r\\n    //returns total database of vaults in array of structs\\r\\n    function getTotalVaultDetails()\\r\\n        public\\r\\n        view\\r\\n        onlyModerator\\r\\n        returns (vault[] memory)\\r\\n    {\\r\\n        return userVaults;\\r\\n    }\\r\\n}\\r\\n\\r\\n//to implement a new contract for  oracle (kind of for loop)\\r\\n\\r\\n// If MKR holders govern the Maker Protocol successfully, the Protocol\\r\\n// will accrue Surplus Dai as Dai holders pay Stability Fees. On the other\\r\\n// hand, if liquidations are inadequate, then the Protocol will accrue Bad\\r\\n// Debt. Once this Surplus Dai / Bad Debt amount hits a threshold, as\\r\\n// voted by MKR holders, then the Protocol will discharge Surplus Dai /\\r\\n// Bad Debt through the Flapper / Flopper smart contract by buying and\\r\\n// burning / minting and selling MKR, respectively.\\r\\n\\r\\n// Risk Premium Rate - This rate is used to calculate the risk premium fee that accrues on debt in a Vault. A\\r\\n// unique Risk Premium Rate is assigned to each collateral type. (e.g. 2.5%/year for Collateral A, 3.5%/year for\\r\\n// Collateral B, etc)\\r\\n\\r\\n//To add logic to withdraw amount after cutting the fee\\r\\n//Or to let repay indai+fee(stability fee)\\r\\n\\r\\n/** */\\r\\n\",\"keccak256\":\"0xfec7e55b9287e5cfb8353b5fbd227b2b0dbd44c4d98413aa579b4afac8b141a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162003f5338038062003f5383398181016040528101906200003791906200044c565b620000697fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336200024460201b60201c565b6200009b7f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f336200024460201b60201c565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555084608081815250508360a081815250508260c08181525050600160048190555060006040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815250905060068190806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a082015181600501555050505050505050620004d4565b6200025682826200033560201b60201c565b6200033157600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620002d66200039f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b6000819050919050565b620003c181620003ac565b8114620003cd57600080fd5b50565b600081519050620003e181620003b6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200041482620003e7565b9050919050565b620004268162000407565b81146200043257600080fd5b50565b60008151905062000446816200041b565b92915050565b600080600080600060a086880312156200046b576200046a620003a7565b5b60006200047b88828901620003d0565b95505060206200048e88828901620003d0565b9450506040620004a188828901620003d0565b9350506060620004b48882890162000435565b9250506080620004c78882890162000435565b9150509295509295909350565b60805160a05160c051613a1062000543600039600081816110c701526115d00152600081816106e90152611902015260008181610b1501528181610e57015281816112a001528181611d2a01528181611f5e015281816120280152818161226201526122980152613a106000f3fe6080604052600436106101b75760003560e01c8063797669c9116100ec578063b16a56151161008a578063c14a7cc811610064578063c14a7cc8146105c1578063c48589cb146105ec578063d460092214610617578063d547741f14610642576101b7565b8063b16a561514610530578063b603540f1461055b578063b9ebc0b414610598576101b7565b8063a217fddf116100c6578063a217fddf14610474578063aa232dc21461049f578063ab845413146104c8578063ae0b163f14610505576101b7565b8063797669c9146103e157806391d148541461040c5780639dc1b45b14610449576101b7565b806336568abe116101595780636a24180d116101335780636a24180d146103565780637196e8411461038157806374cf45f81461038b57806375b238fc146103b6576101b7565b806336568abe146102f8578063501c3a3c146103215780635d12928b1461034c576101b7565b806316b726571161019557806316b7265714610240578063194d749414610269578063248a9ca3146102925780632f2ff15d146102cf576101b7565b806301ffc9a7146101bc57806303f49b35146101f9578063076d081514610224575b600080fd5b3480156101c857600080fd5b506101e360048036038101906101de9190612a3f565b61066b565b6040516101f09190612a87565b60405180910390f35b34801561020557600080fd5b5061020e6106e5565b60405161021b9190612abb565b60405180910390f35b61023e60048036038101906102399190612b02565b61070d565b005b34801561024c57600080fd5b5061026760048036038101906102629190612b02565b610a4e565b005b34801561027557600080fd5b50610290600480360381019061028b9190612b8d565b610d24565b005b34801561029e57600080fd5b506102b960048036038101906102b49190612bf0565b610d90565b6040516102c69190612c2c565b60405180910390f35b3480156102db57600080fd5b506102f660048036038101906102f19190612c47565b610daf565b005b34801561030457600080fd5b5061031f600480360381019061031a9190612c47565b610dd0565b005b34801561032d57600080fd5b50610336610e53565b6040516103439190612abb565b60405180910390f35b610354610e7b565b005b34801561036257600080fd5b5061036b6110c3565b6040516103789190612abb565b60405180910390f35b6103896110eb565b005b34801561039757600080fd5b506103a061129e565b6040516103ad9190612abb565b60405180910390f35b3480156103c257600080fd5b506103cb6112c2565b6040516103d89190612c2c565b60405180910390f35b3480156103ed57600080fd5b506103f66112e6565b6040516104039190612c2c565b60405180910390f35b34801561041857600080fd5b50610433600480360381019061042e9190612c47565b61130a565b6040516104409190612a87565b60405180910390f35b34801561045557600080fd5b5061045e611374565b60405161046b9190612ca0565b60405180910390f35b34801561048057600080fd5b506104896113e7565b6040516104969190612c2c565b60405180910390f35b3480156104ab57600080fd5b506104c660048036038101906104c19190612b8d565b6113ee565b005b3480156104d457600080fd5b506104ef60048036038101906104ea9190612b8d565b611484565b6040516104fc9190612abb565b60405180910390f35b34801561051157600080fd5b5061051a61155b565b6040516105279190612abb565b60405180910390f35b34801561053c57600080fd5b506105456115ce565b6040516105529190612abb565b60405180910390f35b34801561056757600080fd5b50610582600480360381019061057d9190612b8d565b6115f2565b60405161058f9190612abb565b60405180910390f35b3480156105a457600080fd5b506105bf60048036038101906105ba9190612b02565b61160a565b005b3480156105cd57600080fd5b506105d6611900565b6040516105e39190612abb565b60405180910390f35b3480156105f857600080fd5b50610601611924565b60405161060e9190612e03565b60405180910390f35b34801561062357600080fd5b5061062c611a74565b6040516106399190612ea0565b60405180910390f35b34801561064e57600080fd5b5061066960048036038101906106649190612c47565b611c8f565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106de57506106dd82611cb0565b5b9050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078690612f3e565b60405180910390fd5b600081116107d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c990612fd0565b60405180910390fd5b806006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061082657610825612ff0565b5b9060005260206000209060060201600201541015610879576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108709061306b565b60405180910390fd5b6001151561088633611d1a565b1515146108c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bf906130d7565b60405180910390fd5b60006108d333611d65565b9050808210610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90613143565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561095d573d6000803e3d6000fd5b5061096733612074565b6006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106109ba576109b9612ff0565b5b906000526020600020906006020160050181905550816006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610a2357610a22612ff0565b5b90600052602060002090600602016002016000828254610a439190613192565b925050819055505050565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac790612f3e565b60405180910390fd5b60008111610b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0a90613212565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610b8757610b86612ff0565b5b90600052602060002090600602016005015411610bd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd09061327e565b60405180910390fd5b6000610be4336121d7565b9050808210610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f906132ea565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933846040518363ffffffff1660e01b8152600401610c85929190613319565b600060405180830381600087803b158015610c9f57600080fd5b505af1158015610cb3573d6000803e3d6000fd5b50505050816006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610d0b57610d0a612ff0565b5b9060005260206000209060060201600401819055505050565b610d4e7f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f3361130a565b610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d849061338e565b60405180910390fd5b50565b6000806000838152602001908152602001600020600101549050919050565b610db882610d90565b610dc181612310565b610dcb8383612324565b505050565b610dd8612404565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3c90613420565b60405180910390fd5b610e4f828261240c565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef49061348c565b60405180910390fd5b60003411610f40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f379061351e565b60405180910390fd5b610f48612996565b3481604001818152505033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600454816000018181525050600081608001818152505060648160a0018181525050610fb5336124ed565b81606001818152505060068190806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a082015181600501555050600454600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016004546110ba919061353e565b60048190555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461116d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116490612f3e565b60405180910390fd5b600034116111b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a7906135e4565b60405180910390fd5b346006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061120457611203612ff0565b5b90600052602060002090600602016002016000828254611224919061353e565b92505081905550611234336124ed565b6006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061128757611286612ff0565b5b906000526020600020906006020160030181905550565b7f000000000000000000000000000000000000000000000000000000000000000081565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b7f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f81565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006113a07f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f3361130a565b6113df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d69061338e565b60405180910390fd5b600554905090565b6000801b81565b6114187f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f3361130a565b611457576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144e9061338e565b60405180910390fd5b6114817f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f82610daf565b50565b60006114b07f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f3361130a565b6114ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e69061338e565b60405180910390fd5b6006600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061154257611541612ff0565b5b9060005260206000209060060201600201549050919050565b60006115877f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f3361130a565b6115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd9061338e565b60405180910390fd5b600454905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60076020528060005260406000206000915090505481565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461168c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168390612f3e565b60405180910390fd5b60006006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106116e1576116e0612ff0565b5b906000526020600020906006020160040154116116fd57600080fd5b806006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061175157611750612ff0565b5b906000526020600020906006020160040154101561176e57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b81526004016117cb929190613319565b600060405180830381600087803b1580156117e557600080fd5b505af11580156117f9573d6000803e3d6000fd5b50505050806006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061185157611850612ff0565b5b906000526020600020906006020160040160008282546118719190613192565b92505081905550806006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106118cc576118cb612ff0565b5b906000526020600020906006020160030160008282546118ec919061353e565b925050819055506118fc33612074565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606119507f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f3361130a565b61198f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119869061338e565b60405180910390fd5b6006805480602002602001604051908101604052809291908181526020016000905b82821015611a6b57838290600052602060002090600602016040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152602001600582015481525050815260200190600101906119b1565b50505050905090565b611a7c612996565b6001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af590612f3e565b60405180910390fd5b611b06612996565b6006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611b5957611b58612ff0565b5b90600052602060002090600602016000015481600001818152505033816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611bff57611bfe612ff0565b5b9060005260206000209060060201600201548160400181815250506006600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611c6d57611c6c612ff0565b5b9060005260206000209060060201600401548160800181815250508091505090565b611c9882610d90565b611ca181612310565b611cab838361240c565b505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600080611d2683612074565b90507f0000000000000000000000000000000000000000000000000000000000000000811115611d5a576000915050611d60565b60019150505b919050565b60006001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de090612f3e565b60405180910390fd5b60006006600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611e3e57611e3d612ff0565b5b90600052602060002090600602016003015490506006600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611ea557611ea4612ff0565b5b9060005260206000209060060201600301546006600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611f0a57611f09612ff0565b5b90600052602060002090600602016004015410611f5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f539061327e565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006006600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110611fd057611fcf612ff0565b5b90600052602060002090600602016005015411612022576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201990613650565b60405180910390fd5b600060647f000000000000000000000000000000000000000000000000000000000000000060646120539190613192565b8361205e9190613670565b61206891906136e1565b90508092505050919050565b6000806006600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106120ca576120c9612ff0565b5b906000526020600020906006020160020154905060006006600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061213357612132612ff0565b5b906000526020600020906006020160040154905060006064828461215791906136e1565b6121619190613670565b9050806006600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054815481106121b7576121b6612ff0565b5b906000526020600020906006020160050181905550809350505050919050565b6000806121e3836124ed565b905060006006600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061223a57612239612ff0565b5b90600052602060002090600602016004015490506000818361225c91906136e1565b905060007f000000000000000000000000000000000000000000000000000000000000000060648361228e9190613670565b10156122d25783827f00000000000000000000000000000000000000000000000000000000000000006122c19190613192565b6122cb9190613670565b9050612304565b6040517fe9ddc40e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80945050505050919050565b6123218161231c612404565b6126a8565b50565b61232e828261130a565b61240057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506123a5612404565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600033905090565b612416828261130a565b156124e957600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061248e612404565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000806006600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061254357612542612ff0565b5b90600052602060002090600602016002015490506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379409b196040518163ffffffff1660e01b81526004016040805180830381865afa1580156125c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e99190613727565b9150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633cc9732a6040518163ffffffff1660e01b81526004016040805180830381865afa15801561265a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061267e9190613727565b91505060008183856126909190613670565b61269a91906136e1565b905080945050505050919050565b6126b2828261130a565b612729576126bf8161272d565b6126cd8360001c602061275a565b6040516020016126de929190613870565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272091906138f4565b60405180910390fd5b5050565b60606127538273ffffffffffffffffffffffffffffffffffffffff16601460ff1661275a565b9050919050565b60606000600283600261276d9190613670565b612777919061353e565b67ffffffffffffffff8111156127905761278f613916565b5b6040519080825280601f01601f1916602001820160405280156127c25781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106127fa576127f9612ff0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061285e5761285d612ff0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261289e9190613670565b6128a8919061353e565b90505b6001811115612948577f3031323334353637383961626364656600000000000000000000000000000000600f8616601081106128ea576128e9612ff0565b5b1a60f81b82828151811061290157612900612ff0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061294190613945565b90506128ab565b506000841461298c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612983906139ba565b60405180910390fd5b8091505092915050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612a1c816129e7565b8114612a2757600080fd5b50565b600081359050612a3981612a13565b92915050565b600060208284031215612a5557612a546129e2565b5b6000612a6384828501612a2a565b91505092915050565b60008115159050919050565b612a8181612a6c565b82525050565b6000602082019050612a9c6000830184612a78565b92915050565b6000819050919050565b612ab581612aa2565b82525050565b6000602082019050612ad06000830184612aac565b92915050565b612adf81612aa2565b8114612aea57600080fd5b50565b600081359050612afc81612ad6565b92915050565b600060208284031215612b1857612b176129e2565b5b6000612b2684828501612aed565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612b5a82612b2f565b9050919050565b612b6a81612b4f565b8114612b7557600080fd5b50565b600081359050612b8781612b61565b92915050565b600060208284031215612ba357612ba26129e2565b5b6000612bb184828501612b78565b91505092915050565b6000819050919050565b612bcd81612bba565b8114612bd857600080fd5b50565b600081359050612bea81612bc4565b92915050565b600060208284031215612c0657612c056129e2565b5b6000612c1484828501612bdb565b91505092915050565b612c2681612bba565b82525050565b6000602082019050612c416000830184612c1d565b92915050565b60008060408385031215612c5e57612c5d6129e2565b5b6000612c6c85828601612bdb565b9250506020612c7d85828601612b78565b9150509250929050565b6000819050919050565b612c9a81612c87565b82525050565b6000602082019050612cb56000830184612c91565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612cf081612aa2565b82525050565b612cff81612b4f565b82525050565b60c082016000820151612d1b6000850182612ce7565b506020820151612d2e6020850182612cf6565b506040820151612d416040850182612ce7565b506060820151612d546060850182612ce7565b506080820151612d676080850182612ce7565b5060a0820151612d7a60a0850182612ce7565b50505050565b6000612d8c8383612d05565b60c08301905092915050565b6000602082019050919050565b6000612db082612cbb565b612dba8185612cc6565b9350612dc583612cd7565b8060005b83811015612df6578151612ddd8882612d80565b9750612de883612d98565b925050600181019050612dc9565b5085935050505092915050565b60006020820190508181036000830152612e1d8184612da5565b905092915050565b60c082016000820151612e3b6000850182612ce7565b506020820151612e4e6020850182612cf6565b506040820151612e616040850182612ce7565b506060820151612e746060850182612ce7565b506080820151612e876080850182612ce7565b5060a0820151612e9a60a0850182612ce7565b50505050565b600060c082019050612eb56000830184612e25565b92915050565b600082825260208201905092915050565b7f596f7520646f6e7420686176652061205661756c742c2063726561746520612060008201527f7661756c74206669727374210000000000000000000000000000000000000000602082015250565b6000612f28602c83612ebb565b9150612f3382612ecc565b604082019050919050565b60006020820190508181036000830152612f5781612f1b565b9050919050565b7f576974686472617720616d6f756e742073686f756c642062652067726561746560008201527f72207468616e2030000000000000000000000000000000000000000000000000602082015250565b6000612fba602883612ebb565b9150612fc582612f5e565b604082019050919050565b60006020820190508181036000830152612fe981612fad565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f696e73756666696369656e742062616c616e636520696e207661756c74000000600082015250565b6000613055601d83612ebb565b91506130608261301f565b602082019050919050565b6000602082019050818103600083015261308481613048565b9050919050565b7f436c65617220796f7572206465627420696e20746865207661756c7421000000600082015250565b60006130c1601d83612ebb565b91506130cc8261308b565b602082019050919050565b600060208201905081810360008301526130f0816130b4565b9050919050565b7f796f752077696c6c20676f20696e746f20646562742100000000000000000000600082015250565b600061312d601683612ebb565b9150613138826130f7565b602082019050919050565b6000602082019050818103600083015261315c81613120565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061319d82612aa2565b91506131a883612aa2565b92508282039050818111156131c0576131bf613163565b5b92915050565b7f656e7465722076616c696420616d6f756e740000000000000000000000000000600082015250565b60006131fc601283612ebb565b9150613207826131c6565b602082019050919050565b6000602082019050818103600083015261322b816131ef565b9050919050565b7f796f752061726520696e20646562742100000000000000000000000000000000600082015250565b6000613268601083612ebb565b915061327382613232565b602082019050919050565b600060208201905081810360008301526132978161325b565b9050919050565b7f656e74657220616d6f756e74206c657373207468616e204349502063726f7373600082015250565b60006132d4602083612ebb565b91506132df8261329e565b602082019050919050565b60006020820190508181036000830152613303816132c7565b9050919050565b61331381612b4f565b82525050565b600060408201905061332e600083018561330a565b61333b6020830184612aac565b9392505050565b7f4d7573742068617665204d4f44455241544f525f524f4c450000000000000000600082015250565b6000613378601883612ebb565b915061338382613342565b602082019050919050565b600060208201905081810360008301526133a78161336b565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b600061340a602f83612ebb565b9150613415826133ae565b604082019050919050565b60006020820190508181036000830152613439816133fd565b9050919050565b7f596f7520616c726561647920686176652061207661756c740000000000000000600082015250565b6000613476601883612ebb565b915061348182613440565b602082019050919050565b600060208201905081810360008301526134a581613469565b9050919050565b7f45544820616d6f756e74206d7573742062652067726561746572207468616e2060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b6000613508602183612ebb565b9150613513826134ac565b604082019050919050565b60006020820190508181036000830152613537816134fb565b9050919050565b600061354982612aa2565b915061355483612aa2565b925082820190508082111561356c5761356b613163565b5b92915050565b7f65746820616d6f756e74206d7573742062652067726561746572207468616e2060008201527f3000000000000000000000000000000000000000000000000000000000000000602082015250565b60006135ce602183612ebb565b91506135d982613572565b604082019050919050565b600060208201905081810360008301526135fd816135c1565b9050919050565b7f796f752061726520696e20646562740000000000000000000000000000000000600082015250565b600061363a600f83612ebb565b915061364582613604565b602082019050919050565b600060208201905081810360008301526136698161362d565b9050919050565b600061367b82612aa2565b915061368683612aa2565b925082820261369481612aa2565b915082820484148315176136ab576136aa613163565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006136ec82612aa2565b91506136f783612aa2565b925082613707576137066136b2565b5b828204905092915050565b60008151905061372181612ad6565b92915050565b6000806040838503121561373e5761373d6129e2565b5b600061374c85828601613712565b925050602061375d85828601613712565b9150509250929050565b600081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b60006137a8601783613767565b91506137b382613772565b601782019050919050565b600081519050919050565b60005b838110156137e75780820151818401526020810190506137cc565b60008484015250505050565b60006137fe826137be565b6138088185613767565b93506138188185602086016137c9565b80840191505092915050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061385a601183613767565b915061386582613824565b601182019050919050565b600061387b8261379b565b915061388782856137f3565b91506138928261384d565b915061389e82846137f3565b91508190509392505050565b6000601f19601f8301169050919050565b60006138c6826137be565b6138d08185612ebb565b93506138e08185602086016137c9565b6138e9816138aa565b840191505092915050565b6000602082019050818103600083015261390e81846138bb565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061395082612aa2565b91506000820361396357613962613163565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006139a4602083612ebb565b91506139af8261396e565b602082019050919050565b600060208201905081810360008301526139d381613997565b905091905056fea26469706673582212209a365ebd37639c56cf20a9fa86a9bae6ab0d07a94a21b5fb36a97f55a041336a64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "burnIndaiAndRelieveCollateral(uint256)": {
        "details": "only allow user to withdraw if no debt in vault    "
      },
      "getBaseRiskRate()": {
        "details": "public getter function.",
        "returns": {
          "_0": "uint256"
        }
      },
      "getCIP()": {
        "details": "this function is public in case we need to manually liquidate a vault",
        "returns": {
          "_0": ""
        }
      },
      "getCurrentVaultId()": {
        "returns": {
          "_0": "Returns the user's balance in eth"
        }
      },
      "getRiskPremiumRate()": {
        "details": "public getter function.",
        "returns": {
          "_0": "uint256"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTotalVaultDetails()": {
        "returns": {
          "_0": "total collateral balance of the whole contract in eth"
        }
      },
      "getUserCollateralBalance(address)": {
        "returns": {
          "_0": "uint256 type max mintable indai"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidateVault(address)": {
        "details": "emits event of the risky vaults this function is periodically called by chainlink keepersthis function updates the user's collateral balance in inr in the vault periodically"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateVault()": {
        "custom:misc": "User can use this function to mint dai after depositing the collateral in vault",
        "details": "This function is the algorithmic minting of indai, one indai is minted for every rupee of collateralUpdates the token amount in the user's vault"
      },
      "vaultDetailsForTheUser()": {
        "details": "public getter function.",
        "returns": {
          "_0": "uint256"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burnIndaiAndRelieveCollateral(uint256)": {
        "notice": "User can withdraw if any excess collateral than 150 percent of indai issued"
      },
      "getBaseRiskRate()": {
        "notice": "collateral to indai percentage defined by the DAO."
      },
      "getCIP()": {
        "notice": "liquidates vaults that get too risky."
      },
      "getRiskPremiumRate()": {
        "notice": "base risk rate on all collateral types defined by the DAO."
      },
      "getUserCollateralBalance(address)": {
        "notice": "calculates max amount of indai that can be minted by user at given vault state"
      },
      "liquidateVault(address)": {
        "notice": "This function liquidates vaults that get too risky"
      },
      "mintIndai(uint256)": {
        "notice": "creates a new vault for a user"
      },
      "updateVault()": {
        "notice": "This allows user to mint indai based on their collateral in the vaultUser cannot mint if vault health is lower than 150 percentOne indai is issued for every ruppee of collateral(in eth, converted to inr)"
      },
      "vaultDetailsForTheUser()": {
        "notice": "risk premium rate on specific collateral type defined by the DAO."
      },
      "withdrawFromVault(uint256)": {
        "notice": "This adds nore collateral in eth to the user's existing vault"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3523,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3518_storage)"
      },
      {
        "astId": 5255,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(i_Indai)5234"
      },
      {
        "astId": 5258,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "priceContract",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceFeed)5249"
      },
      {
        "astId": 5270,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5278,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "vault_ID",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5280,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "currentCollateralBalance",
        "offset": 0,
        "slot": "5",
        "type": "t_int256"
      },
      {
        "astId": 5297,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "userVaults",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(vault)5293_storage)dyn_storage"
      },
      {
        "astId": 5315,
        "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
        "label": "userIndexes",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(vault)5293_storage)dyn_storage": {
        "base": "t_struct(vault)5293_storage",
        "encoding": "dynamic_array",
        "label": "struct CollateralSafekeep.vault[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPriceFeed)5249": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(i_Indai)5234": {
        "encoding": "inplace",
        "label": "contract i_Indai",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3518_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3518_storage"
      },
      "t_struct(RoleData)3518_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3515,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3517,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(vault)5293_storage": {
        "encoding": "inplace",
        "label": "struct CollateralSafekeep.vault",
        "members": [
          {
            "astId": 5282,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "vaultId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5284,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "userAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5286,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5288,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "balanceInINR",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5290,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "indaiIssued",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5292,
            "contract": "contracts/CollateralSafekeep.sol:CollateralSafekeep",
            "label": "vaultHealth",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}